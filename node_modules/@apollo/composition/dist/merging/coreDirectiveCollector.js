"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectCoreDirectivesToCompose = void 0;
const federation_internals_1 = require("@apollo/federation-internals");
function collectCoreDirectivesToCompose(subgraphs) {
    const directivesPerFeatureAndVersion = new Map();
    for (const subgraph of subgraphs) {
        const features = subgraph.schema.coreFeatures;
        (0, federation_internals_1.assert)(features, 'Subgraphs should be core schemas');
        for (const directive of subgraph.schema.directives()) {
            const source = features.sourceFeature(directive);
            if (!source || directive.applications().length === 0) {
                continue;
            }
            const url = source.feature.url;
            const fqn = `${source.nameInFeature}-${url.identity}`;
            let forFeature = directivesPerFeatureAndVersion.get(fqn);
            if (!forFeature) {
                forFeature = new Map();
                directivesPerFeatureAndVersion.set(fqn, forFeature);
            }
            const major = url.version.major > 0 ? url.version.major : -url.version.minor;
            let forVersion = forFeature.get(major);
            if (forVersion) {
                if (url.version.compareTo(forVersion.feature.version) > 0) {
                    forVersion.feature = url;
                }
            }
            else {
                forVersion = {
                    feature: url,
                    name: source.nameInFeature,
                    definitionsPerSubgraph: new Map(),
                };
                forFeature.set(major, forVersion);
            }
            forVersion.definitionsPerSubgraph.set(subgraph.name, directive);
        }
    }
    return (0, federation_internals_1.mapValues)(directivesPerFeatureAndVersion)
        .flatMap((perVersion) => (0, federation_internals_1.mapValues)(perVersion))
        .map((d) => {
        const featureDefinition = (0, federation_internals_1.coreFeatureDefinitionIfKnown)(d.feature);
        const compositionSpec = featureDefinition === null || featureDefinition === void 0 ? void 0 : featureDefinition.compositionSpecification(d.name);
        if (!compositionSpec) {
            return undefined;
        }
        return {
            ...d,
            compositionSpec,
        };
    })
        .filter(federation_internals_1.isDefined);
}
exports.collectCoreDirectivesToCompose = collectCoreDirectivesToCompose;
//# sourceMappingURL=coreDirectiveCollector.js.map