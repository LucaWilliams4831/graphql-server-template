"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARGUMENT_COMPOSITION_STRATEGIES = void 0;
const definitions_1 = require("./definitions");
exports.ARGUMENT_COMPOSITION_STRATEGIES = {
    MAX: {
        name: 'MAX',
        supportedTypes: (schema) => [new definitions_1.NonNullType(schema.intType())],
        mergeValues: (values) => Math.max(...values),
    },
    MIN: {
        name: 'MIN',
        supportedTypes: (schema) => [new definitions_1.NonNullType(schema.intType())],
        mergeValues: (values) => Math.min(...values),
    },
    SUM: {
        name: 'SUM',
        supportedTypes: (schema) => [new definitions_1.NonNullType(schema.intType())],
        mergeValues: (values) => values.reduce((acc, val) => acc + val, 0),
    },
    INTERSECTION: {
        name: 'INTERSECTION',
        supportedTypes: (schema) => schema.builtInScalarTypes().map((t) => new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(t)))),
        mergeValues: (values) => values.reduce((acc, val) => acc.filter((v) => val.includes(v)), values[0]),
    },
    UNION: {
        name: 'UNION',
        supportedTypes: (schema) => schema.builtInScalarTypes().map((t) => new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(t)))),
        mergeValues: (values) => values.reduce((acc, val) => {
            const newValues = val.filter((v) => !acc.includes(v));
            return acc.concat(newValues);
        }, []),
    },
};
//# sourceMappingURL=argumentCompositionStrategies.js.map