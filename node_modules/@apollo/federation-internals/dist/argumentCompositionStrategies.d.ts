import { InputType, ListType, NonNullType, Schema } from "./definitions";
export type ArgumentCompositionStrategy = {
    name: string;
    supportedTypes: (schema: Schema) => InputType[];
    mergeValues: (values: any[]) => any;
};
export declare const ARGUMENT_COMPOSITION_STRATEGIES: {
    MAX: {
        name: string;
        supportedTypes: (schema: Schema) => NonNullType<import("./definitions").ScalarType>[];
        mergeValues: (values: any[]) => number;
    };
    MIN: {
        name: string;
        supportedTypes: (schema: Schema) => NonNullType<import("./definitions").ScalarType>[];
        mergeValues: (values: any[]) => number;
    };
    SUM: {
        name: string;
        supportedTypes: (schema: Schema) => NonNullType<import("./definitions").ScalarType>[];
        mergeValues: (values: any[]) => any;
    };
    INTERSECTION: {
        name: string;
        supportedTypes: (schema: Schema) => NonNullType<ListType<NonNullType<import("./definitions").ScalarType>>>[];
        mergeValues: (values: any[]) => any;
    };
    UNION: {
        name: string;
        supportedTypes: (schema: Schema) => NonNullType<ListType<NonNullType<import("./definitions").ScalarType>>>[];
        mergeValues: (values: any[]) => any;
    };
};
//# sourceMappingURL=argumentCompositionStrategies.d.ts.map